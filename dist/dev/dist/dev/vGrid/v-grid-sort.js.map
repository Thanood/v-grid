{"version":3,"sources":["vGrid/v-grid-sort.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;2BAMa,S;AAMX,2BAAY,KAAZ,EAAmB;AAAA;;AAAA,eAMnB,QANmB,GAMR,EANQ;AAAA,eAOnB,OAPmB,GAOT,EAPS;;AACjB,eAAK,KAAL,GAAa,KAAb;AACD;;4BAWD,K,oBAAQ;AACN,eAAK,QAAL,GAAgB,EAAhB;AACA,eAAK,OAAL,GAAe,EAAf;AACD,S;;4BAMD,S,sBAAU,I,EAAM,G,EAAK;AAGnB,cAAI,OAAO,KAAK,QAAL,CAAc,MAAd,GAAuB,CAAlC,EAAqC;AAInC,iBAAK,OAAL,GAAe,KAAK,QAApB;AACA,gBAAI,QAAQ,KAAZ;;AAIA,iBAAK,OAAL,CAAa,OAAb,CAAqB,UAAU,CAAV,EAAa;AAChC,kBAAI,EAAE,SAAF,KAAgB,KAAK,SAAzB,EAAoC;AAClC,wBAAQ,IAAR;AACA,kBAAE,GAAF,GAAQ,EAAE,GAAF,KAAU,IAAV,GAAiB,KAAjB,GAAyB,IAAjC;AAED;AACF,aAND;;AAUA,gBAAI,CAAC,KAAL,EAAY;AACV,mBAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB;AACA,mBAAK,OAAL,CAAa,KAAK,OAAL,CAAa,MAAb,GAAsB,CAAnC,EAAsC,EAAtC,GAA2C,KAAK,OAAL,CAAa,MAAxD;AACD;AACD,iBAAK,QAAL,GAAgB,KAAK,OAArB;AAGD,WA1BD,MA0BO;AAGL,iBAAK,OAAL,GAAe,CAAC,IAAD,CAAf;AACA,iBAAK,OAAL,CAAa,CAAb,EAAgB,EAAhB,GAAqB,CAArB;AACA,gBAAI,KAAK,QAAL,CAAc,CAAd,CAAJ,EAAsB;AACpB,kBAAI,KAAK,QAAL,CAAc,CAAd,EAAiB,SAAjB,KAA+B,KAAK,OAAL,CAAa,CAAb,EAAgB,SAAnD,EAA8D;AAC5D,oBAAI,KAAK,QAAL,CAAc,CAAd,EAAiB,GAAjB,KAAyB,KAAK,OAAL,CAAa,CAAb,EAAgB,GAA7C,EAAkD;AAChD,uBAAK,OAAL,CAAa,CAAb,EAAgB,GAAhB,GAAsB,KAAK,OAAL,CAAa,CAAb,EAAgB,GAAhB,KAAwB,IAAxB,GAA+B,KAA/B,GAAuC,IAA7D;AACD;AACF;AACF;AACD,iBAAK,QAAL,GAAgB,KAAK,OAArB;AAGD;AAGF,S;;4BAMD,S,wBAAY;AACV,iBAAO,KAAK,OAAZ;AACD,S;;4BAMD,G,gBAAI,K,EAAO;AAIT,cAAI,WAAW,KAAK,SAAL,EAAf;;AAGA,gBAAM,IAAN,CAAW,UAAU,IAAV,EAAgB,IAAhB,EAAsB,CAAtB,EAAyB;AAClC,gBAAI,SAAS,CAAb;;AAEA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,MAAb,IAAuB,UAAU,CAAjD,EAAoD,EAAE,CAAtD,EAAyD;AAEvD,kBAAI,aAAa,SAAS,CAAT,CAAjB;AACA,kBAAI,KAAK,KAAK,WAAW,SAAhB,CAAT;AACA,kBAAI,KAAK,KAAK,WAAW,SAAhB,CAAT;;AAEA,kBAAI,OAAO,EAAX,EAAe;AACb,oBAAI,WAAW,GAAf,EAAoB;AAElB,sBAAI,KAAK,EAAT,EACE,SAAS,CAAC,CAAV,CADF,KAGE,SAAS,CAAT;AACH,iBAND,MAMO;AAEL,sBAAI,KAAK,EAAT,EACE,SAAS,CAAT,CADF,KAGE,SAAS,CAAC,CAAV;AAEH;AACF;AACF;AACD,mBAAO,MAAP;AACD,WA3BD;;AA6BA,eAAK,QAAL,GAAgB,KAAK,SAAL,GAAiB,KAAjB,CAAuB,CAAvB,CAAhB;AAGD,S","file":"vGrid/v-grid-sort.js","sourceRoot":"/source/","sourcesContent":["/*****************************************************************************************************************\r\n *    vGridInterpolate\r\n *    This just does the sorting with the data the grid gives it\r\n *    Created by vegar ringdal\r\n *\r\n ****************************************************************************************************************/\r\nexport class VGridSort {\r\n\r\n\r\n  /***************************************************************************************\r\n   * constsructor\r\n   ***************************************************************************************/\r\n  constructor(vGrid) {\r\n    this.vGrid = vGrid;\r\n  }\r\n\r\n\r\n  //what they say...\r\n  lastSort = [];\r\n  curSort = [];\r\n\r\n\r\n  /***************************************************************************************\r\n   * resets sort\r\n   ***************************************************************************************/\r\n  reset() {\r\n    this.lastSort = [];\r\n    this.curSort = [];\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * set the filter\r\n   ***************************************************************************************/\r\n  setFilter(sort, add) {\r\n\r\n    //do we add or is it the first one\r\n    if (add && this.lastSort.length > 0) {\r\n\r\n\r\n      //its adding, so lets get last one\r\n      this.curSort = this.lastSort;\r\n      var exist = false;\r\n\r\n\r\n      //loop to se if it exist from before\r\n      this.curSort.forEach(function (x) {\r\n        if (x.attribute === sort.attribute) {\r\n          exist = true;\r\n          x.asc = x.asc === true ? false : true;\r\n\r\n        }\r\n      });\r\n\r\n\r\n      //if it dont exist we add it, else there isnt anythin else to do for now\r\n      if (!exist) {\r\n        this.curSort.push(sort);\r\n        this.curSort[this.curSort.length - 1].no = this.curSort.length;\r\n      }\r\n      this.lastSort = this.curSort;\r\n\r\n\r\n    } else {\r\n\r\n      //if not adding, just set it\r\n      this.curSort = [sort];\r\n      this.curSort[0].no = 1;\r\n      if (this.lastSort[0]) {\r\n        if (this.lastSort[0].attribute === this.curSort[0].attribute) {\r\n          if (this.lastSort[0].asc === this.curSort[0].asc) {\r\n            this.curSort[0].asc = this.curSort[0].asc === true ? false : true;\r\n          }\r\n        }\r\n      }\r\n      this.lastSort = this.curSort;\r\n\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * returns the filter\r\n   ***************************************************************************************/\r\n  getFilter() {\r\n    return this.curSort;\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * run the sort\r\n   ***************************************************************************************/\r\n  run(array) {\r\n\r\n\r\n    //super simple for now.. atleast I have som form for sort\r\n    var thisSort = this.getFilter();\r\n\r\n    //this is mix from different sources... from what I can tell it works now\r\n    array.sort(function (obj1, obj2, i) {\r\n      var result = 0;\r\n\r\n      for (var i = 0; i < thisSort.length && result == 0; ++i) {\r\n        //loop until all are sorted\r\n        var currentObj = thisSort[i];\r\n        var v1 = obj1[currentObj.attribute];\r\n        var v2 = obj2[currentObj.attribute];\r\n\r\n        if (v1 !== v2) {\r\n          if (currentObj.asc) {\r\n            //ASC\r\n            if (v1 < v2)\r\n              result = -1;\r\n            else\r\n              result = 1;\r\n          } else {\r\n            //DESC\r\n            if (v1 < v2)\r\n              result = 1;\r\n            else\r\n              result = -1;\r\n\r\n          }\r\n        }\r\n      }\r\n      return result;\r\n    });\r\n\r\n    this.lastSort = this.getFilter().slice(0);\r\n\r\n\r\n  }\r\n\r\n}\r\n"]}