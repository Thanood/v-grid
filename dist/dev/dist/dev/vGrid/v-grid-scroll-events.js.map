{"version":3,"sources":["vGrid/v-grid-scroll-events.js"],"names":[],"mappings":"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","file":"vGrid/v-grid-scroll-events.js","sourceRoot":"/source/","sourcesContent":["/*****************************************************************************************************************\r\n *    VGridScrollEvents\r\n *    This just have all the scroll functions the vGridGenerator needs\r\n *    Created by vegar ringdal\r\n *\r\n ****************************************************************************************************************/\r\nexport class VGridScrollEvents {\r\n\r\n  constructor(vGrid) {\r\n    this.vGrid = vGrid;\r\n    this.lastScrollTop = 0;\r\n    this.lastScrollLeft = 0;\r\n    this.isScrollBarScrolling = false;\r\n    this.scrollbarScrollingTimer = null;\r\n    this.lastScrollType = null\r\n  }\r\n\r\n  get vGridGenerator() {\r\n    if (this.vGrid) {\r\n      return this.vGrid.vGridGenerator;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  get vGridSelection() {\r\n    if (this.vGrid) {\r\n      return this.vGrid.vGridSelection;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  get vGridConfig() {\r\n    if (this.vGrid) {\r\n      return this.vGrid.vGridConfig;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  get vGridCellHelper() {\r\n    if (this.vGrid) {\r\n      return this.vGrid.vGridCellHelper;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  get vGridElement() {\r\n    if (this.vGrid) {\r\n      return this.vGrid.element;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  get vGridSortable() {\r\n    if (this.vGrid) {\r\n      return this.vGrid.vGridSortable;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  get vGridResizable() {\r\n    if (this.vGrid) {\r\n      return this.vGrid.vGridResizable;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /****************************************************************************************************************************\r\n   * option to scrollbars scrolling where we update all the time and dont use timeout\r\n   ****************************************************************************************************************************/\r\n  onLargeScroll() {\r\n\r\n    this.lastScrollTop = this.vGridGenerator.contentElement.scrollTop;\r\n\r\n    if (this.vGridConfig.getCollectionLength() <= this.vGridGenerator.rowElementArray.length) {\r\n      this.lastScrollTop = 0;\r\n    }\r\n\r\n\r\n    //vars\r\n    var rowHeight = this.vGridConfig.attRowHeight;\r\n    var bodyHeight = this.vGridGenerator.contentElement.clientHeight;\r\n    var currentRow = parseInt(this.lastScrollTop / rowHeight, 10);\r\n    var firstRow = parseInt(this.vGridGenerator.contentElement.scrollTop / rowHeight, 10);\r\n    var currentRowTop = rowHeight * currentRow;\r\n    var firstRowTop = rowHeight * firstRow;\r\n    var collectionLength = this.vGridConfig.getCollectionLength();\r\n\r\n\r\n    //for setting after\r\n    var setAfter = (cacheRowNumber) => {\r\n      var row = this.vGridGenerator.rowElementArray[cacheRowNumber];\r\n      this.vGridGenerator.setRowTopValue([row], 0, currentRowTop);\r\n      currentRowTop = currentRowTop + rowHeight;\r\n    };\r\n\r\n\r\n    //for setting before (when hitting bottom)\r\n    var setBefore = (cacheRowNumber) => {\r\n      var row = this.vGridGenerator.rowElementArray[cacheRowNumber];\r\n      firstRowTop = firstRowTop - rowHeight;\r\n      this.vGridGenerator.setRowTopValue([row], 0, firstRowTop);\r\n    };\r\n\r\n\r\n    //for setting before (when hitting bottom)\r\n    var setHiddenFromView = (cacheRowNumber) => {\r\n      var row = this.vGridGenerator.rowElementArray[cacheRowNumber];\r\n      this.vGridGenerator.setRowTopValue([row], 0, -(currentRowTop + (this.vGridConfig.attRowHeight * 50)));\r\n    };\r\n\r\n    //loop row html cache\r\n    for (var i = 0; i < this.vGridGenerator.getRowCacheLength(); i++) {\r\n      var moved = false;\r\n      switch (true) {\r\n        case currentRow >= 0 && currentRow <= collectionLength - 1:\r\n          setAfter(i);\r\n          moved = true;\r\n          break;\r\n        case currentRow >= collectionLength && (collectionLength * rowHeight) >= bodyHeight:\r\n          setBefore(i);\r\n          moved = true;\r\n          break;\r\n      }\r\n      if (!moved) {\r\n        if (currentRow >= collectionLength && (currentRowTop - rowHeight) >= bodyHeight) {\r\n          setHiddenFromView(i);\r\n        } else {\r\n          //if this triggers the collection have been removed, so really just need to place out the rows\r\n          if (currentRow >= collectionLength) {\r\n            setAfter(i);\r\n          }\r\n        }\r\n      }\r\n\r\n      currentRow++;\r\n    }\r\n\r\n\r\n    //I now sort the array again.\r\n    this.vGridGenerator.rowElementArray.sort(\r\n      function (a, b) {\r\n        return parseInt(a.top) - parseInt(b.top)\r\n      });\r\n\r\n    //update row data\r\n    this.vGridGenerator.rebindAllRowSlots();\r\n  };\r\n\r\n\r\n  /****************************************************************************************************************************\r\n   * add the rows to scroll div (for normal scrolling when not using scrollbars)\r\n   ****************************************************************************************************************************/\r\n  onSmallScroll(isDownScroll, currentScrollTop) {\r\n\r\n    //check is user have preformed big scroll\r\n    var currentScrollTop = this.vGridGenerator.contentElement.scrollTop;\r\n    if (this.isScrollBarScrolling === false) {\r\n\r\n\r\n      var newTopValue;\r\n      var currentRow = parseInt((this.lastScrollTop / this.vGridConfig.attRowHeight), 10);\r\n      var collectionHeight = this.vGridConfig.attRowHeight * this.vGridGenerator.getRowCacheLength();\r\n      var rowHeight = this.vGridConfig.attRowHeight;\r\n\r\n      //loop our row html cache\r\n      for (var i = 0; i < this.vGridGenerator.getRowCacheLength(); i++) {\r\n\r\n        var row = this.vGridGenerator.rowElementArray[i];\r\n        var rowTop = parseInt(row.top, 10);\r\n        var update = false;\r\n\r\n\r\n        if (isDownScroll) {\r\n          this.lastScrollType = \"down\";\r\n          if (rowTop < (currentScrollTop - rowHeight)) {\r\n            update = true;\r\n            newTopValue = rowTop + collectionHeight;\r\n            currentRow = (rowTop + collectionHeight) / rowHeight;\r\n          }\r\n\r\n          //if for some reason the new rowtop is higher then collection, and content height (for cases where very small collection)\r\n          if (rowTop > ((this.vGridConfig.getCollectionLength() - 1) * rowHeight) && rowTop > this.vGridGenerator.contentHeight) {\r\n            update = false;\r\n            this.vGridGenerator.setRowTopValue([row], 0, -((rowHeight * i) + (rowHeight * 50)));\r\n          }\r\n\r\n        } else {\r\n          this.lastScrollType = \"up\";\r\n          if (rowTop > (currentScrollTop + this.vGridGenerator.contentHeight)) {\r\n            update = true;\r\n            newTopValue = rowTop - collectionHeight;\r\n            currentRow = (rowTop - collectionHeight) / rowHeight;\r\n          }\r\n\r\n        }\r\n\r\n        //update data\r\n        if (update === true && currentRow >= 0 && currentRow <= this.vGridConfig.getCollectionLength() - 1) {\r\n          this.vGridGenerator.setRowTopValue([row], 0, newTopValue);\r\n          this.vGridConfig.updateRowBinding(currentRow, row, isDownScroll, false);\r\n        }\r\n\r\n      }\r\n\r\n      //sort the cache array so we loop in correct order\r\n      this.vGridGenerator.rowElementArray.sort(\r\n        function (a, b) {\r\n          return parseInt(a.top) - parseInt(b.top)\r\n        });\r\n\r\n    } else {\r\n\r\n      //just in case user scrolls big then small, do not want to update before he stops\r\n      this.onScrollbarScrolling()\r\n    }\r\n\r\n  };\r\n\r\n\r\n  /****************************************************************************************************************************\r\n   * option to scrollbars scrolling where we dont update all the time and use timeout (\r\n   * plan was to use this with virtual scrolling with datasource using chaching to fetch data, you dont want to try and get 500 k rows in 5 sec\r\n   ****************************************************************************************************************************/\r\n  onScrollbarScrolling() {\r\n    //set halt var to true, so small scroll will be stopped, will be laggy else\r\n    this.isScrollBarScrolling = true;\r\n\r\n    //delay before doing update\r\n    var timeout = this.vGridConfig.attDataScrollDelay;\r\n\r\n    //clear scroll timeout\r\n    clearTimeout(this.scrollbarScrollingTimer);\r\n\r\n    //set timeout, incase user is still scrolling\r\n    this.scrollbarScrollingTimer = setTimeout(() => {\r\n      this.onLargeScroll();\r\n      this.isScrollBarScrolling = false;\r\n    }, timeout);\r\n\r\n\r\n  };\r\n\r\n\r\n  /****************************************************************************************************************************\r\n   * fixes scrolling / top of divs\r\n   ****************************************************************************************************************************/\r\n  scrollEventHandler() {\r\n\r\n\r\n    var currentScrollTop = this.vGridGenerator.contentElement.scrollTop;\r\n    var currentScrollLeft = this.vGridGenerator.contentElement.scrollLeft;\r\n\r\n\r\n    //are we scrolling ?\r\n    if (currentScrollTop !== this.lastScrollTop) {\r\n      //is vert scroll\r\n\r\n      //stop left scroll...\r\n      if (currentScrollLeft !== 0) {\r\n        this.vGridGenerator.contentElement.scrollLeft = this.lastScrollLeft;\r\n        this.vGridGenerator.headerElement.scrollLeft = this.lastScrollLeft\r\n      }\r\n\r\n      //check if down scroll.\r\n      var isDownScroll = true;\r\n      if (currentScrollTop < this.lastScrollTop) {\r\n        isDownScroll = false;\r\n      }\r\n\r\n      //check if big scroll (split m into 2.. simple to read)\r\n      var isLargeScroll;\r\n      switch (true) {\r\n        case currentScrollTop > this.lastScrollTop + this.vGridConfig.largeScrollLimit:\r\n        case currentScrollTop < this.lastScrollTop - this.vGridConfig.largeScrollLimit:\r\n          isLargeScroll = true;\r\n          break;\r\n        default:\r\n          isLargeScroll = false;\r\n      }\r\n\r\n      //reset scroll top\r\n      this.lastScrollTop = currentScrollTop;\r\n\r\n      //check if big scroll\r\n      if (isLargeScroll) {\r\n        //now user can set this, on very large collections this will drag preformance down\r\n        if (this.vGridConfig.attRenderOnScrollbarScroll) {\r\n          this.onLargeScroll()\r\n        } else {\r\n          this.onScrollbarScrolling();\r\n        }\r\n      } else {\r\n        this.onSmallScroll(isDownScroll, currentScrollTop)\r\n      }\r\n    } else {\r\n\r\n      if (this.vGridGenerator.contentElement.style.overflowX === \"hidden\") {\r\n        //we do not want scrolls left if this is hidden..\r\n        this.vGridGenerator.contentElement.scrollLeft = 0;\r\n        this.lastScrollLeft = 0;\r\n        this.vGridGenerator.headerElement.scrollLeft = 0;\r\n      } else {\r\n        if (this.lastScrollLeft !== currentScrollLeft) {\r\n          currentScrollLeft = this.vGridGenerator.contentElement.scrollLeft;\r\n          this.lastScrollLeft = currentScrollLeft;\r\n          this.vGridGenerator.headerElement.scrollLeft = currentScrollLeft;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n"]}