{"version":3,"sources":["vGrid/v-grid-config.js"],"names":[],"mappings":"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","file":"vGrid/v-grid-config.js","sourceRoot":"/source/","sourcesContent":["/*****************************************************************************************************************\r\n *    VGridConfig\r\n *    This generates the config used by vGridgenerator, other classes also calls this to get the information, also have misc utillity functions\r\n *    Created by vegar ringdal\r\n *\r\n ****************************************************************************************************************/\r\n\r\nexport class VGridConfig {\r\n\r\n\r\n  /***************************************************************************************\r\n   * CSS classes used by grid\r\n   ***************************************************************************************/\r\n  css = {\r\n    wrapper: \"vGrid\",\r\n    row: \"vGrid-row\",\r\n    mainHeader: \"vGrid-header\",\r\n    mainContent: \"vGrid-body\",\r\n    mainFooter: \"vGrid-footer\",\r\n    scrollBody: \"vGrid-body-scroll\",\r\n    rowColumn: \"vGrid-row-column\",\r\n    rowHeaderColumn: \"vGrid-row-column-header\",\r\n    rowHeader: \"vGrid-row-header\",\r\n    rowSelected: \"vGrid-row-selected\",\r\n    rowContainer: \"vGrid-row-container\",\r\n    rowAlt: \"vGrid-row-alt\",\r\n    rowEven: \"vGrid-row-even\",\r\n    dragHandle: \"vGrid-vGridDragHandle\",\r\n    resizeHeaderDragHandle: \"vGrid-draggable-handler\",\r\n    sortIcon: \"vGrid-glyphicon\",\r\n    sortIconSort: \"vGrid-glyphicon-sort\",\r\n    sortIconAsc: \"vGrid-glyphicon-sort-asc\",\r\n    sortIconDesc: \"vGrid-glyphicon-sort-desc\",\r\n    sortIconNo: \"vGrid-glyphicon\"\r\n  };\r\n\r\n\r\n  /***************************************************************************************\r\n   * different attributes used by grid\r\n   ***************************************************************************************/\r\n  atts = {\r\n    dataAttribute: \"v-grid-data-attribute\",\r\n    dataAttributeFilter: \"v-grid-data-attribute-filter\"\r\n  };\r\n\r\n\r\n  /***************************************************************************************\r\n   * default settings, v-grid-col.js and v-grid-atts populate these defaults with new values\r\n   ***************************************************************************************/\r\n  constructor(vGrid) {\r\n    this.vGrid = vGrid;\r\n\r\n    //<v-grid-col> attributes\r\n    this.colConfig = [];\r\n\r\n    //count of columns;\r\n    this.columnLength = 0;\r\n\r\n    //<v-grid> attibutes\r\n    this.attAttributeObserve = [];\r\n    this.attRowHeight = 50;\r\n    this.attHeaderHeight = 0;\r\n    this.attFooterHeight = 0;\r\n    this.attResizableHeaders = false;\r\n    this.attMultiSelect = undefined;\r\n    this.attSortableHeader = false;\r\n    this.attLoadingThreshold = -1; //for when loading screen comes on\r\n    this.attRemoteIndex = false;\r\n    this.attManualSelection = false;\r\n    this.eventOnRowDraw = null;\r\n    this.eventOnRowClick = null;\r\n    this.eventOnRowDblClick = null;\r\n    this.eventOnRemoteCall = null;\r\n\r\n    //repeat html vars\r\n    this.repeater = false;\r\n    this.repeatRowTemplate = null;\r\n\r\n\r\n    //static atm (dunno if I want them as options yet)\r\n    this.attDataScrollDelay = 200;\r\n    this.attRequestAnimationFrame = true;\r\n    this.attResizableHeadersAndRows = true; //is just here if someone for some reson would like to just resize header, and fix rows after\r\n    this.attRenderOnScrollbarScroll = true;\r\n\r\n\r\n    //remote internal vars\r\n    this.keepFilterOnCollectionChange = false; //for keeping the sorticons like they are\r\n    this.remoteLimit = 40;\r\n    this.remoteLength = 0;\r\n    this.remoteOffset = 0;\r\n\r\n\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   *  utillity functions for setting attibutes default, and converting them\r\n   ***************************************************************************************/\r\n\r\n  setValue(htmlAttributeValue, defaultValue) {\r\n    var value = defaultValue;\r\n    if (htmlAttributeValue !== undefined && htmlAttributeValue !== null && !isNaN(htmlAttributeValue)) {\r\n      value = htmlAttributeValue;\r\n    }\r\n    return value;\r\n  };\r\n\r\n\r\n  setBindValueArray(value, toProperty) {\r\n    if (value !== undefined && value !== null) {\r\n      var tempArray = value.split(\",\");\r\n      tempArray.forEach((prop)=> {\r\n        prop = prop.trim();\r\n      });\r\n      this[toProperty] = tempArray;\r\n    }\r\n  }\r\n\r\n\r\n  setBindValueInt(value, toProperty) {\r\n    this[toProperty] = this.setValue(parseInt(value), this[toProperty]);\r\n  }\r\n\r\n  \r\n  setBindValueString(value, toProperty) {\r\n    if (typeof(value) === \"string\" && value !== '' && value !== undefined && value !== null) {\r\n      if(toProperty === \"attRemoteIndex\"){\r\n        //this one is special, for tracking remote\r\n        this[toProperty] = true;\r\n        this.vGrid.vGridRowKey = value;\r\n      } else {\r\n        this[toProperty] = value;\r\n      }\r\n\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n  setBindValueFunction(value, toProperty) {\r\n    if (typeof(value) === \"function\") {\r\n      this[toProperty] = value;\r\n    }\r\n  }\r\n\r\n\r\n  setBindValueBool(value, toProperty) {\r\n    let type = {\r\n      \"true\": true,\r\n      \"false\": false\r\n    };\r\n    this[toProperty] = this.setValue(type[value], this[toProperty]);\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * loops current rowRef and create tempRef that gets sent to onRowDraw\r\n   ***************************************************************************************/\r\n  getRowProperties(obj) {\r\n    if (obj) {\r\n      var x = {};\r\n      for (var k in obj) {\r\n        if (obj.hasOwnProperty(k)) {\r\n          if (x[k] !== obj[k]) {\r\n            x[k] = obj[k];\r\n          }\r\n        }\r\n      }\r\n      return x;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * calls remote function\r\n   ***************************************************************************************/\r\n  remoteCall(data) {\r\n    data = data ? data : {};\r\n    this.eventOnRemoteCall({\r\n      filter: data.filter || this.vGrid.vGridFilter.lastFilter,\r\n      sort: data.sort || this.vGrid.vGridSort.getFilter(),\r\n      limit: data.limit || this.remoteLimit,\r\n      offset: data.offset || this.remoteOffset\r\n    })\r\n      .then((data)=> {\r\n\r\n        this.vGrid.vGridObservables.disableObservablesArray();\r\n        this.vGrid.vGridObservables.disableObservablesCollection();\r\n        this.vGrid.vGridCollection = data.col;\r\n        this.remoteLimit = data.limit;\r\n        this.remoteLength = data.length;\r\n        this.vGrid.vGridCollectionFiltered = this.vGrid.vGridCollection.slice(0);\r\n        this.vGrid.checkKeys();\r\n        this.vGrid.vGridCurrentRow = -1;\r\n        if (!this.attRemoteIndex) {\r\n          this.vGrid.vGridSelection.reset();\r\n        }\r\n        this.vGrid.vGridGenerator.collectionChange();\r\n        this.vGrid.loading = false;\r\n        this.vGrid.vGridPager.updatePager({\r\n          limit: this.remoteLimit,\r\n          offset: this.remoteOffset,\r\n          length: this.remoteLength\r\n        });\r\n        setTimeout(()=> {\r\n          this.vGrid.vGridObservables.enableObservablesArray();\r\n          this.vGrid.vGridObservables.enableObservablesCollection();\r\n        }, 200);\r\n      });\r\n\r\n\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * This is called when grid runs filter\r\n   ***************************************************************************************/\r\n  onFilterRun = (filterObj) => {\r\n\r\n    if (filterObj.length !== 0 || this.vGrid.vGridCollectionFiltered.length !== this.vGrid.vGridCollection.length || this.eventOnRemoteCall) {\r\n\r\n      //set loading screen\r\n      if (this.vGrid.vGridCollection.length > this.attLoadingThreshold) {\r\n        this.vGrid.loading = true;\r\n      }\r\n\r\n      //run query\r\n      setTimeout(()=> {\r\n        //get current key if there is any, need this to find current row after filter\r\n        var curKey = -1;\r\n        if (this.vGrid.vGridCurrentEntityRef) {\r\n          curKey = this.vGrid.vGridCurrentEntityRef[this.vGrid.vGridRowKey];\r\n        }\r\n\r\n\r\n        //if remotecall is set then lets use that\r\n        if (this.eventOnRemoteCall) {\r\n\r\n          //set last filter they just set\r\n          this.vGrid.vGridFilter.lastFilter = filterObj;\r\n\r\n          //on filter we need to set offset to 0\r\n          this.remoteOffset = 0;\r\n\r\n          //trigger remote call\r\n          this.remoteCall();\r\n\r\n        } else {\r\n\r\n\r\n          //run filter\r\n          this.vGrid.vGridCollectionFiltered = this.vGrid.vGridFilter.run(this.vGrid.vGridCollection, filterObj);\r\n\r\n\r\n          //run sorting\r\n          this.vGrid.vGridSort.run(this.vGrid.vGridCollectionFiltered);\r\n\r\n\r\n          //set current row/entity in sync\r\n          var newRowNo = -1;\r\n          if (curKey) {\r\n            this.vGrid.vGridCollectionFiltered.forEach((x, index) => {\r\n              if (curKey === x[this.vGrid.vGridRowKey]) {\r\n                newRowNo = index;\r\n              }\r\n            });\r\n          }\r\n\r\n\r\n          //update current row/current entity/entity ref\r\n          if (newRowNo > -1) {\r\n            this.vGrid.vGridCurrentEntityRef = this.vGrid.vGridCollectionFiltered[newRowNo];\r\n            this.vGrid.vGridCurrentEntity[this.vGrid.vGridRowKey] = this.vGrid.vGridCurrentEntityRef[this.vGrid.vGridRowKey];\r\n            this.vGrid.vGridCurrentRow = newRowNo;\r\n          } else {\r\n            this.vGrid.vGridCurrentRow = newRowNo;\r\n          }\r\n\r\n\r\n          //update grid rows\r\n          this.vGrid.vGridGenerator.collectionChange(true);\r\n          this.vGrid.loading = false;\r\n        }\r\n\r\n      }, 50);\r\n\r\n    }\r\n\r\n\r\n  };\r\n\r\n\r\n  /***************************************************************************************\r\n   * grid asks for the filter name from attibute\r\n   ***************************************************************************************/\r\n  getFilterName(name) {\r\n    return this.vGrid.vGridFilter.getNameOfFilter(name)\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * This just sets data from array,\r\n   * Use {} if you want markup of columns, or undefined for total blank rows\r\n   ***************************************************************************************/\r\n  getDataElement(row, isDown, isLargeScroll, callback) {\r\n    if (this.vGrid.vGridCollectionFiltered !== undefined) {\r\n      if (this.eventOnRowDraw) {\r\n        //if user have added this then we call it so they can edit the row data before we display it\r\n        var data = this.getRowProperties(this.vGrid.vGridCollectionFiltered[row]);\r\n        this.eventOnRowDraw({\r\n            tempRef: data || null,\r\n            rowRef: this.vGrid.vGridCollectionFiltered[row] || null\r\n          }\r\n        );\r\n        callback(data)\r\n      } else {\r\n        callback(this.vGrid.vGridCollectionFiltered[row]);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * This calls the order by function\r\n   * Use {} if you want markup of columns, or undefined for total blank rows\r\n   ***************************************************************************************/\r\n  onOrderBy(attribute, add) {\r\n\r\n\r\n\r\n\r\n    //can we do the sorting?\r\n    if (this.vGrid.vGridCollectionFiltered.length > 0) {\r\n      //set loading screen\r\n      if (this.vGrid.vGridCollection.length > this.attLoadingThreshold) {\r\n        this.vGrid.loading = true;\r\n      }\r\n\r\n      //set query\r\n      setTimeout(()=> {\r\n        //set filter\r\n        this.vGrid.vGridSort.setFilter({\r\n          attribute: attribute,\r\n          asc: true\r\n        }, add);\r\n\r\n\r\n        let event = new CustomEvent(\"sortIconUpdate\", {\r\n          detail: \"\",\r\n          bubbles: true\r\n        });\r\n        this.vGrid.element.dispatchEvent(event);\r\n\r\n\r\n        //if remote call is set\r\n        if (this.eventOnRemoteCall) {\r\n\r\n          //trigger remote call\r\n          this.remoteCall();\r\n\r\n        } else {\r\n          //run filter\r\n          this.vGrid.vGridSort.run(this.vGrid.vGridCollectionFiltered);\r\n\r\n\r\n          //set new row\r\n          if (this.vGrid.vGridCurrentEntityRef) {\r\n            this.vGrid.vGridCollectionFiltered.forEach((x, index) => {\r\n              if (this.vGrid.vGridCurrentEntityRef[this.vGrid.vGridRowKey] === x[this.vGrid.vGridRowKey]) {\r\n                this.vGrid.vGridCurrentRow = index;\r\n              }\r\n            });\r\n          }\r\n\r\n\r\n          //update grid\r\n          this.vGrid.vGridGenerator.collectionChange();\r\n          this.vGrid.loading = false;\r\n        }\r\n\r\n      }, 50);\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * Just for knowing length,\r\n   * Its this you will need to add for server source/paging with endless scrolling\r\n   ***************************************************************************************/\r\n  getCollectionLength() {\r\n    return this.vGrid.vGridCollectionFiltered.length;\r\n  }\r\n\r\n\r\n  /***************************************************************************************\r\n   * Listen for click on rows(called from v-grid-generator eventlistner for the buffer rows it created)\r\n   * Snd set current entity, and also allow edit of cell\r\n   ***************************************************************************************/\r\n  clickHandler(event, row) {\r\n\r\n\r\n    //set current row of out filtered row\r\n    this.vGrid.vGridCurrentRow = row;\r\n\r\n\r\n    //get data ref\r\n    this.vGrid.vGridCurrentEntityRef = this.vGrid.vGridCollectionFiltered[row];\r\n\r\n\r\n    //loop properties and set them to current entity\r\n    let data = this.vGrid.vGridCurrentEntityRef;\r\n    for (var k in data) {\r\n      if (data.hasOwnProperty(k)) {\r\n        if (this.vGrid.vGridCurrentEntity[k] !== data[k]) {\r\n          this.vGrid.vGridCurrentEntity[k] = data[k];\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    //this dispatch events that v-grid-row-col.js picks up, for calling back is event for single on rows are set\r\n    if (event.type === \"click\") {\r\n      this.vGrid.raiseEvent(\"v-row-onclick\", {\r\n        evt: event,\r\n        data: this.vGrid.vGridCollectionFiltered[this.vGrid.vGridCurrentRow],\r\n        row: this.vGrid.vGridGetRowKey(this.vGrid.vGridCollectionFiltered[this.vGrid.vGridCurrentRow][this.vGrid.vGridRowKey])\r\n      });\r\n    }\r\n\r\n\r\n    //this dispatch events that v-grid-row-col.js picks up, for calling back is event for dblclick on rows are set\r\n    if (event.type === \"dblclick\") {\r\n      this.vGrid.raiseEvent(\"v-row-ondblclick\", {\r\n        evt: event,\r\n        data: this.vGrid.vGridCollectionFiltered[this.vGrid.vGridCurrentRow],\r\n        row: this.vGrid.vGridGetRowKey(this.vGrid.vGridCollectionFiltered[this.vGrid.vGridCurrentRow][this.vGrid.vGridRowKey])\r\n      });\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  /****************************************************************************************************************************\r\n   * calls user for element, user haveto use callback here, might also need to fetch data first..\r\n   ****************************************************************************************************************************/\r\n  updateRowBinding(rowNo, row, isDownScroll, isLargeScroll) {\r\n    //called when drawing row\r\n    //lets ask for our data, and insert it into row\r\n    this.getDataElement(rowNo, isDownScroll, isLargeScroll,\r\n      (entity) => {\r\n\r\n        row.div.setAttribute(\"row\", rowNo);\r\n\r\n        if (entity === \"\") {\r\n          let bindingContext = {};\r\n          row.viewSlot.bind(bindingContext, {\r\n            bindingContext: bindingContext,\r\n            parentOverrideContext: this.vGrid.overrideContext\r\n          });\r\n        }\r\n\r\n        if (entity !== \"\" && row.viewSlot !== null) {\r\n          let tempRef = {};\r\n          for (var k in entity) {\r\n            if (entity.hasOwnProperty(k)) {\r\n              if (tempRef[k] !== entity[k]) {\r\n                tempRef[k] = entity[k];\r\n              }\r\n            }\r\n          }\r\n          var that = this;\r\n          let bindingContext = {};\r\n          bindingContext.row = rowNo;\r\n          bindingContext.ctx = this;\r\n          bindingContext.tempRef = tempRef;\r\n          bindingContext.rowRef = this.vGrid.vGridCollectionFiltered[rowNo];\r\n          row.viewSlot.bind(bindingContext, {\r\n            bindingContext: bindingContext,\r\n            parentOverrideContext: this.vGrid.overrideContext\r\n          });\r\n        }\r\n\r\n        if (entity === undefined || entity === \"\" || entity === null) {\r\n          row.div.style.display = \"none\";\r\n        } else {\r\n          row.div.style.display = \"block\";\r\n        }\r\n\r\n        //add alt/even css\r\n        if (rowNo % 2 === 1) {\r\n          if (row.div.classList.contains(this.css.rowEven)) {\r\n            row.div.classList.remove(this.css.rowEven);\r\n            row.div.classList.add(this.css.rowAlt);\r\n          }\r\n\r\n        } else {\r\n          if (row.div.classList.contains(this.css.rowAlt)) {\r\n            row.div.classList.remove(this.css.rowAlt);\r\n            row.div.classList.add(this.css.rowEven);\r\n          }\r\n        }\r\n        //set highlight\r\n        if (this.vGrid.vGridSelection.isSelected(rowNo)) {\r\n          row.div.classList.add(this.css.rowSelected)\r\n        } else {\r\n          row.div.classList.remove(this.css.rowSelected)\r\n        }\r\n      });\r\n  };\r\n\r\n\r\n}\r\n"]}