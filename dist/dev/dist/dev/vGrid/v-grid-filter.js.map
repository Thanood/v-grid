{"version":3,"sources":["vGrid/v-grid-filter.js"],"names":[],"mappings":"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","file":"vGrid/v-grid-filter.js","sourceRoot":"/source/","sourcesContent":["/*****************************************************************************************************************\n *    vGridFilter\n *    This just does the filtering on vGridCollection from the values the grid gives it\n *    Created by vegar ringdal\n *\n ****************************************************************************************************************/\nexport class VGridFilter {\n\n\n  /***************************************************************************************\n   * constsructor\n   ***************************************************************************************/\n  constructor(vGrid) {\n    this.vGrid = vGrid;\n  }\n\n  //not in use yet\n  lastFilter = [];\n  queryStrings = {};\n\n\n  ///filter table\n  filterOperatorTable = {\n    \"=\": 1,   //equal\n    \"<=\": 2,  //less than or equal to\n    \">=\": 3,  //greater than or equal to\n    \"<\": 4,   //less than\n    \">\": 5,   //greater than\n    \"*\": 6,   //contains\n    \"!=\": 7,  //not equal to\n    \"!*\": 8,  //does not contain\n    \"*=\": 9,  //begin with\n    \"=*\": 10  //end with\n  };\n\n\n  //filter table\n  filterOperatorTableString = {\n    \"=\": \"equals\",              //1\n    \"<=\": \"less than or eq\",    //2\n    \">=\": \"greater than or eq\", //3\n    \"<\": \"less than\",           //4\n    \">\": \"greater than\",        //5\n    \"*\": \"contains\",            //6\n    \"!=\": \"not equal to\",       //7\n    \"!*\": \"does not contain\",   //8\n    \"*=\": \"begins with\",        //9\n    \"=*\": \"ends with\"           //10\n  };\n\n\n  /***************************************************************************************\n   * run the name of filter\n   ***************************************************************************************/\n  getNameOfFilter(name) {\n    return this.filterOperatorTableString[name];\n  }\n\n  /***************************************************************************************\n   * run the filter\n   ***************************************************************************************/\n  run(objArray, ObjFilter) {\n\n    //my operators\n    let filterOperatorTable = this.filterOperatorTable;\n\n\n    var resultArray = objArray.filter(function (data) {\n\n\n      //lets have true as default, so all that should not be there we set false..\n      var result = true;\n      ObjFilter.forEach(function (x) {\n\n\n        //vars\n        var rowValue;\n        var filterValue;\n        var filterOperator = filterOperatorTable[x.operator];\n        var newFilterOperator;\n\n\n        //helper for boolean\n        var typeBool = {\n          \"true\": true,\n          \"false\": false\n        };\n\n\n        //set defult type\n        var type;\n        try {\n          type = typeof(data[x.attribute]);\n        } catch (e) {\n          type = \"string\";\n        }\n\n\n        //lets set som defaults\n        switch (type) {\n          case \"number\":\n            rowValue = data[x.attribute];\n            filterValue = Number(x.value);\n            filterOperator = filterOperator || 1;\n            if(filterOperator === 6){\n              filterOperator = 1;\n            }\n\n            break;\n          case \"string\":\n            rowValue = data[x.attribute].toLowerCase();\n            filterValue = x.value.toLowerCase();\n            filterOperator = filterOperator || 9;\n            newFilterOperator = filterOperator;\n\n            //todo: add more options here and replace with a switch.., also\n\n            //if filter operator is BEGIN WITH\n            if (x.value.charAt(0) === \"*\" && filterOperator === 9) {\n              newFilterOperator = 6;\n              filterValue = filterValue.substr(1, filterValue.length);\n            }\n\n\n            //if filter operator is EQUAL TO\n            //wildcard first = end with\n            if (x.value.charAt(0) === \"*\" && filterOperator === 1) {\n              newFilterOperator = 10;\n              filterValue = filterValue.substr(1, filterValue.length);\n            }\n\n\n            //wildcard end and first = contains\n            if (x.value.charAt(x.value.length - 1) === \"*\" && filterOperator === 1 && newFilterOperator === 10) {\n              newFilterOperator = 6;\n              filterValue = filterValue.substr(0, filterValue.length - 1);\n            }\n\n\n            //begin with since wildcard is in the end\n            if (x.value.charAt(x.value.length - 1) === \"*\" && filterOperator === 1 && newFilterOperator !== 10 && newFilterOperator !== 6) {\n              newFilterOperator = 9;\n              filterValue = filterValue.substr(0, filterValue.length - 1);\n            }\n\n\n            //set the filteroperator from new if changed\n            if (filterOperator !== newFilterOperator) {\n              filterOperator = newFilterOperator;\n            }\n            break;\n\n\n          case \"boolean\":\n            rowValue = data[x.attribute];\n            filterValue = typeBool[x.value];\n            filterOperator = 1;\n            break;\n\n\n          case \"object\":\n            rowValue = data[x.attribute].toISOString();\n            filterValue = new Date(x.value).toISOString(); //todo, this needs to be better...\n            filterOperator = filterOperator || 2;\n            break;\n\n\n          default :\n            //todo: take the stuff under equal to and put in a function and also call i from here.. or just make it fail?\n            rowValue = data[x.attribute].toLowerCase();\n            filterValue = x.value.toLowerCase();\n            filterOperator = filterOperator || 1;\n            break;\n        }\n\n\n        //filter from what operator used\n        switch (filterOperator) {\n          case 1: //equal\n            if (rowValue !== filterValue) {\n              result = false;\n            }\n            break;\n          case 2: //less or equal\n            if (!(rowValue <= filterValue)) {\n              result = false;\n            }\n            break;\n          case 3: //greater or equal\n            if (!(rowValue >= filterValue)) {\n              result = false;\n            }\n            break;\n          case 4://greate\n            if (!(rowValue < filterValue)) {\n              result = false;\n            }\n            break;\n          case 5: //greater\n            if (!(rowValue > filterValue)) {\n              result = false;\n            }\n            break;\n          case 6: //contains\n            if (rowValue.indexOf(filterValue) === -1) {\n              result = false;\n            }\n            break;\n          case 7: //not equal to\n            if (rowValue !== filterValue) {\n              result = false;\n            }\n            break;\n          case 8: //does not contain\n            if (rowValue.indexOf(filterValue) !== -1) {\n              result = false;\n            }\n            break;\n          case 9: //begin with\n            if (rowValue.substring(0, filterValue.length) !== filterValue) {\n              result = false;\n            }\n            break;\n          case 10: //end with\n            if (rowValue.substring(rowValue.length - filterValue.length, rowValue.length) !== filterValue) {\n              result = false;\n            }\n            break;\n          default :\n            if (rowValue !== filterValue) {\n              result = false;\n            }\n        }\n        if (type === \"string\") {\n          if (x.value.charAt(0) === \"*\" && x.value.length === 1) {\n            result = true\n          }\n        }\n\n\n      });//end foreach obj\n      return result\n\n    });\n    return resultArray;\n  };\n}//end class\n"]}