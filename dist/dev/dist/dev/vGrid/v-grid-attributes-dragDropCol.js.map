{"version":3,"sources":["vGrid/v-grid-attributes-dragDropCol.js"],"names":[],"mappings":"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","file":"vGrid/v-grid-attributes-dragDropCol.js","sourceRoot":"/source/","sourcesContent":["/*****************************************************************************************************************\n *    Drag drop columns for the grid\n *    can not be used with row-repeat... yet\n *    Created by vegar ringdal\n *\n ****************************************************************************************************************/\nimport {inject, customAttribute} from 'aurelia-framework';\nimport {VGrid} from './v-grid';\n\n\n@customAttribute('v-drag-drop-col')\n@inject(Element, VGrid)\nexport class vGridDragDropCol {\n\n\n  constructor(element, vGrid) {\n    this.vGrid = vGrid;\n    this.element = element;\n    this.dragEl;\n    this.canMove = false;\n    this.sortable = false;\n    this.onDragOverX = this.onDragOver.bind(this);\n    this.onDragEndX = this.onDragEnd.bind(this);\n  }\n\n\n  bind(bindingContext, overrideContext) {\n    this.bindingContext = bindingContext;\n    this.overrideContext = overrideContext;\n\n  }\n\n  attached() {\n    this.setDragHandles();\n\n    //need to be better, will change when I rebuild header into custom element\n    this.rootEl = this.vGrid.vGridGenerator.headerScrollElement; //this is BAD!\n\n    //add eventlistnes for draggable\n    this.mainCol.addEventListener('dragstart', this.onDragStart.bind(this), false);\n\n\n    //event listner for when starting to drag\n    this.vGrid.element.addEventListener(\"vGridDragStart\", ()=> {\n      this.drophelper.style[\"z-index\"] = \"100\";\n    });\n\n\n    //event listner when stopped dragging\n    this.vGrid.element.addEventListener(\"vGridDragStop\", ()=> {\n      this.drophelper.style[\"z-index\"] = \"-100\";\n    })\n\n\n  }\n\n\n  /***************************************************\n   * sets drag handle\n   *****************************************************/\n  setDragHandles() {\n\n    //add drag class\n    this.element.classList.add(\"vGrid-vGridDragHandle\");\n\n\n    //get column element\n    let mainCol = this.element;\n    while (mainCol.nodeName !== 'V-GRID-HEADER-COL') {\n      mainCol = mainCol.offsetParent;\n    }\n    this.mainCol = mainCol;\n\n\n    //create drop helper (so we dont get switching on wide columns)\n    var drophelper = document.createElement(\"v-grid-drop\");\n    drophelper.style.width = \"30px\";\n    drophelper.style.bottom = 0;\n    drophelper.style.top = 0;\n    drophelper.style.left = parseInt(this.mainCol.clientWidth / 2) - 15 + \"px\";\n    //drophelper.style[\"background-color\"] = \"blue\"; //enable to see them\n    drophelper.style[\"z-index\"] = \"-100\";\n    drophelper.style.position = \"absolute\";\n    this.mainCol.appendChild(drophelper);\n    this.drophelper = drophelper;\n\n\n    //helpers\n    this.element.onmouseenter = () => {\n      this.canMove = true;\n      //add draggable to elements\n      this.setDraggable(true);\n    };\n\n\n    //helpers\n    this.element.onmouseleave = () => {\n      this.canMove = false;\n      //remove draggable to elements\n      this.setDraggable(false);\n    };\n\n\n  }\n\n\n  /***************************************************\n   * sets the elements draggable attribute\n   *****************************************************/\n  setDraggable(newStatus) {\n    this.mainCol.draggable = newStatus;\n  }\n\n\n  /***************************************************\n   * updates columns\n   *****************************************************/\n  updateColumns() {\n\n    //temp arrays\n    let tempArr = [];\n    let vGridConfig = [];\n\n\n    //loop em and build temp arrays and set new column number\n    var dragHandles = this.vGrid.vGridGenerator.gridElement.getElementsByTagName('v-grid-header-col');\n    [].slice.call(dragHandles).forEach((itemEl, index) => {\n      tempArr.push(parseInt(itemEl.getAttribute(\"column-no\")));\n      vGridConfig.push(null);\n      itemEl.setAttribute(\"column-no\", index);\n    });\n\n\n    //reorder to new column no\n    tempArr.forEach((oldI, newI) => {\n      vGridConfig[newI] = this.vGrid.vGridConfig.colConfig[oldI]\n    });\n\n\n    //set new columnconfig\n    this.vGrid.vGridConfig.colConfig = vGridConfig;\n\n\n    //reset template and fill data\n    this.vGrid.vGridGenerator.rowTemplate = null;\n\n\n    //rebuild the columns\n    this.vGrid.vGridGenerator.rebuildColumnsRows();\n\n\n  }\n\n\n  /***************************************************\n   * when starting dragging\n   *****************************************************/\n  onDragStart(evt) {\n\n    if (this.canMove) {\n\n      //get target\n      this.dragEl = evt.target;\n\n      //get our column no\n      this.colNo = parseInt(this.dragEl.getAttribute(\"column-no\"));\n\n      //dispatch event so all make  dropzone\n      let event = new CustomEvent(\"vGridDragStart\", {\n        detail: \"\",\n        bubbles: true\n      });\n      this.vGrid.element.dispatchEvent(event);\n\n\n      this.sortable = true;\n\n\n      evt.dataTransfer.effectAllowed = 'move';\n      evt.dataTransfer.setData('Text', '');\n\n      this.rootEl.addEventListener('dragover', this.onDragOverX, false);\n      this.rootEl.addEventListener('dragend', this.onDragEndX, false);\n\n      setTimeout(()=> {\n        this.dragEl.classList.add('ghost');\n      }, 0);\n    } else {\n      evt.preventDefault();\n    }\n\n  }\n\n\n  /***************************************************\n   * when dragging over event(moving)\n   *****************************************************/\n  onDragOver(evt) {\n\n    //why?\n    if (evt.preventDefault !== void 0) {\n      evt.preventDefault();\n      evt.stopPropagation();\n    }\n\n    //set temp col\n    let colNo = -1;\n\n    //get column\n    let target = evt.target;\n    if (target) {\n      while (target.nodeName !== 'V-GRID-HEADER-COL') {\n        target = target.offsetParent;\n      }\n\n      colNo = parseInt(target.getAttribute(\"column-no\"));\n      var targetNode = evt.target.nodeName === 'V-GRID-DROP';\n\n\n      if (colNo !== this.colNo && targetNode && colNo > -1) {\n        var after = colNo + 1 !== this.colNo;// && !isLong || halfway && isLong;\n\n        //reset colNo\n        this.colNo = colNo;\n\n        //move\n        this.rootEl.insertBefore(this.dragEl, after ? target.nextElementSibling : target);\n\n        //update columns\n        this.updateColumns();\n\n\n      }\n    }\n\n\n  }\n\n\n  /***************************************************\n   * when drag event have ended\n   *****************************************************/\n  onDragEnd(evt) {\n\n    evt.preventDefault();\n\n    //trigger dragdrop so all updates and remove ghost/events\n    let event = new CustomEvent(\"vGridDragStop\", {\n      detail: \"\",\n      bubbles: true\n    });\n    this.vGrid.element.dispatchEvent(event);\n\n    this.dragEl.classList.remove('ghost');\n    this.rootEl.removeEventListener('dragover', this.onDragOverX, false);\n    this.rootEl.removeEventListener('dragend', this.onDragEndX, false);\n    this.sortable = false;\n  }\n\n\n}\n"]}