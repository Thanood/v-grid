{"version":3,"sources":["vGrid/v-grid-markup-generator.js"],"names":[],"mappings":"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","file":"vGrid/v-grid-markup-generator.js","sourceRoot":"/source/","sourcesContent":["/*****************************************************************************************************************\n *    VGridMarkupGenerator\n *    This generates all html strings needed for row/headers templates when needed\n *    Created by vegar ringdal\n *\n ****************************************************************************************************************/\nexport class VGridMarkupGenerator {\n\n  constructor(vGrid) {\n    this.vGrid = vGrid;\n  }\n\n\n  /********************************************************************\n   * checks the column configs and calls method to process them\n   ********************************************************************/\n  generate() {\n    let columnsToUse = [];\n    let type = null;\n\n    if (this.vGrid.vGridColumns && this.vGrid.vGridColumns.length > 0) {\n      columnsToUse = this.vGrid.vGridColumns;\n      type = 'typeArray'\n    }\n\n    if (this.vGrid.vGridConfig.colConfig && this.vGrid.vGridConfig.colConfig.length > 0) {\n      columnsToUse = this.colConfig;\n      type = 'typeHtml'\n    }\n\n    if (!type) {\n      throw new Error('column setup missing');\n    }\n\n    if (type === 'typeArray') {\n      this.vGrid.vGridConfig.colConfig = this.vGrid.vGridColumns;\n      this.vGrid.vGridConfig.columnLength = this.vGrid.vGridColumns.length;\n    }\n    this.processColumns(this.vGrid.vGridConfig.colConfig);\n\n\n  }\n\n\n  /********************************************************************\n   * loops the column and starts calling functions to generaate the markup\n   ********************************************************************/\n  processColumns(array) {\n\n    array.forEach((col, index)=> {\n\n      //we need attribute or rowtemplate, else throm error\n      if (!col.colField && !col.colRowTemplate) {\n        if(col.colType !== \"selection\"){\n          throw new Error('colField is not set on column', index);\n        }\n      }\n\n      //set default, some can be missing\n      col.colType = col.colType || \"text\";\n      col.colFilterTop = col.colFilterTop || false;\n      col.colHeaderName = col.colHeaderName || this.getAttribute(col.colField, true);\n      col.colWidth = col.colWidth || 100;\n      col.colCss = col.colCss || '';\n      col.colField = this.checkAttribute(col.colField);\n\n      //create row and header templates\n      this.createHeaderTemplate(col);\n      this.createRowTemplate(col);\n\n\n    });\n  }\n\n\n  /********************************************************************\n   * generates and sets the header template\n   ********************************************************************/\n  createHeaderTemplate(col) {\n\n    //if header template does not exist then lets create it\n    if (!col.colHeaderTemplate) {\n      let inputHeader;\n      let labelHeader;\n      switch (col.colType) {\n\n        case \"selection\":\n          //override to manual selection\n          this.vGrid.vGridConfig.attManualSelection = true;\n          //set template\n          labelHeader = '';\n          inputHeader = `<input class=\"vgrid-row-checkbox-100\" v-selection=\"header\" type=\"checkbox\">`;\n          break;\n\n        case \"image\":\n          inputHeader = '<p class=\"vgrid-label-top\"></p>';\n          if (!col.colFilterTop) {\n            col.colFilter = \"x\"\n          }\n          labelHeader = this.createLabelMarkup(col);\n          break;\n\n        default://text\n          inputHeader = this.createInputHeaderMarkup(col);\n          labelHeader = this.createLabelMarkup(col);\n          break;\n\n      }\n\n      //set correctly to where is is suppoed to be\n      if (col.colFilterTop) {\n        col.colHeaderTemplate = inputHeader + labelHeader;\n      } else {\n        col.colHeaderTemplate = labelHeader + inputHeader;\n      }\n    }\n  }\n\n\n  /********************************************************************\n   * generates and sets the row template\n   ********************************************************************/\n  createRowTemplate(col) {\n\n    //if row template does not exist, then lets create it\n    if (!col.colRowTemplate) {\n\n      switch (col.colType) {\n\n        case \"selection\":\n          //override to manual selection\n          this.vGrid.vGridConfig.attManualSelection = true;\n          //set template\n          col.colRowTemplate = `<input v-key-move class=\"vgrid-row-checkbox-100\"  v-selection=\"row\" type=\"checkbox\" >`;\n          break;\n\n        case \"image\":\n          this.createImageRowMarkup(col);\n          break;\n\n        default://text\n          this.createInputRowMarkup(col);\n          break;\n\n      }\n    }\n  }\n\n\n  /********************************************************************\n   * simple way to get get attribute, this can prb be done better...\n   ********************************************************************/\n  getAttribute = function (value, capitalize) {\n\n    let returnValue = value || \"missing!\";\n\n    if (value) {\n\n      //remove rowRef/tempRef\n      value = value.replace('rowRef.', '');\n      value = value.replace('tempRef.', '');\n\n      //loop it until we have the attribute\n      let newValue = \"\";\n      let done = false;\n      for (var x = 0; x < value.length; x++) {\n        let letter = value.charAt(x);\n\n        //if we hit & or | or space we are at the end\n        if (!done && letter !== \" \" && letter !== \"&\" && letter !== \"|\" && letter !== \":\") {\n          newValue = newValue + letter;\n        } else {\n          done = true;\n        }\n      }\n\n      //capilize first letter\n      if (capitalize) {\n        returnValue = newValue.charAt(0).toUpperCase() + newValue.slice(1);\n      } else {\n        returnValue = newValue;\n      }\n\n    }\n\n    return returnValue;\n  };\n\n\n  /********************************************************************\n   *adds rowRef if temp/rowRef isnt set, have this so user dont haveto write it to make it work\n   ********************************************************************/\n  checkAttribute(attribute) {\n    let value = attribute;\n    if (attribute) {\n      if (attribute.indexOf(\"rowRef\") === -1 && attribute.indexOf(\"tempRef\") === -1) {\n        value = \"rowRef.\" + attribute;\n      }\n    }\n    return value;\n  }\n\n\n  /********************************************************************\n   * create image row markup\n   ********************************************************************/\n  createImageRowMarkup(col) {\n\n    //get the values/settings\n    let classNames = 'class=\"vgrid-image-round\"';\n    let attributeRow = col.colAddRowAttributes ? col.colAddRowAttributes : '';\n    let css = col.colCss ? `css=\"${col.colCss}\"` : '';\n\n    //insert the markup\n    col.colRowTemplate = `<image ${css} ${classNames} v-image-fix ${attributeRow} src.bind=\"${col.colField}\">`;\n\n  }\n\n\n  /********************************************************************\n   * create text/checkbox row markup\n   ********************************************************************/\n  createInputRowMarkup(col) {\n\n    //get the values/settings\n    let colClass = `class=\"${col.colType === \"checkbox\" ? 'vgrid-row-checkbox-100' : 'vgrid-row-input'}\"`;\n\n    //type\n    let colType = `type=\"${col.colType}\"`;\n\n    //get attributes row\n    let colAddRowAttributes = col.colAddRowAttributes ? col.colAddRowAttributes : '';\n\n    //get css\n    let colCss = col.colCss ? `css=\"${col.colCss}\"` : '';\n\n    //attibute observer for 2 way flow between row and current entity\n    let attributeObserver = `v-observe-field=\"${this.getAttribute(col.colField)}\"`;\n\n    //is it a checkbox?\n    //todo: adding the observer part without choice, maybe param for that?\n    if (col.colType === \"checkbox\") {\n      col.colRowTemplate = `<input ${attributeObserver} ${colCss} ${colClass} ${colType} ${colAddRowAttributes}  checked.bind=\"${col.colField}\">`;\n    } else {\n      col.colRowTemplate = `<input ${attributeObserver} ${colCss} ${colClass} ${colType} ${colAddRowAttributes}  value.bind=\"${col.colField}\">`;\n    }\n\n  }\n\n\n  /********************************************************************\n   * create header filter markup\n   ********************************************************************/\n  createInputHeaderMarkup(col) {\n\n    //is it filter ?\n    let markup;\n    if (col.colFilter) {\n\n      //type\n      let type = `type=\"${col.colType}\"`;\n\n      //filter\n      let filter = col.colFilter ? `v-filter=\"${col.colFilter}\"` : '';\n\n      //get attributes label\n      let colAddFilterAttributes = col.colAddFilterAttributes ? col.colAddFilterAttributes : '';\n\n      //is it a checkbox ?\n      let classNames = '';\n      if (col.colType === \"checkbox\") {\n        classNames = `class=\"${col.colFilterTop ? 'vgrid-row-checkbox-50' : 'vgrid-row-checkbox-50'}\"`;\n      } else {\n        classNames = `class=\"${col.colFilterTop ? 'vgrid-header-input-top' : 'vgrid-header-input-bottom'}\"`;\n      }\n\n      //apply magic\n      markup = `<input  ${classNames} ${colAddFilterAttributes} ${type} ${filter}\">`;\n    } else {\n      markup = '';\n    }\n\n    //return the markup\n    return markup;\n\n  }\n\n\n  /********************************************************************\n   * create label markup\n   ********************************************************************/\n  createLabelMarkup(col) {\n    //get the values/settings\n    let filterClass = col.colFilter ? `${col.colFilterTop ? 'vgrid-label-bottom' : 'vgrid-label-top'}` : 'vgrid-label-full';\n\n    let dragDropClass = this.vGrid.vGridConfig.attSortableHeader ? 'vGrid-vGridDragHandle' : '';\n\n    let classname = `class=\"${dragDropClass} ${filterClass}\"`;\n\n    let colAddLabelAttributes = col.colAddLabelAttributes ? col.colAddLabelAttributes : '';\n\n    let sort = col.colSort ? `v-sort=\"${col.colSort}\"` : '';\n\n    //apply magic\n    //todo, atm Im adding resize columns and dragdrop columns, should this be a choice?\n    let markup = `<p v-drag-drop-col v-resize-col ${classname} ${sort} ${colAddLabelAttributes}>${col.colHeaderName}</p>`;\n    //return the markup\n    return markup;\n  }\n\n\n}\n"]}